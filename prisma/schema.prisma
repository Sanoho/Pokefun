generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id                     Int @id @default(autoincrement())
  username               String?  @unique
  name                   String?
  email                  String  @unique
  picture                String?
  age                    Int?
  bio                    String?
  coins                  Int @default(100)
  badges                 Int @default(0)
  createdAt              DateTime  @default(now()) @map(name: "created_at")
  updatedAt              DateTime  @updatedAt @map(name: "updated_at")
  pokemons               PokemonTeam[]
  friendedBy             Friend[]  @relation("friendsWith")
  friendsWith            Friend[] @relation("friend")

  @@unique([id, username])
}

model Pokemon {
  id                 Int @id @default(autoincrement())
  name               String @unique
  nickname           String?
  image              String
  type               String @default("normal")
  secondaryType      String?
  details            String?
  weight             String?
  height             String?
  hp                 Int
  attack             Int
  speed              Int
  defense            Int @default(1)
  spriteFront        String
  spriteBack         String
  shinyFront         String
  shinyBack          String
  reply              String
  wins               Int @default(0)
  evolveAt           Int?
  canEvolve          Boolean @default(false) 
  shiny              Boolean @default(false)
  main               Boolean @default(false)
  cost               Int?
  primeTypeColor     String?
  secTypeColor       String?
  trainers           PokemonTeam[]

  @@unique([id, name, image])
}

model PokemonTeam {
  pokemon       Pokemon @relation(fields: [pokemonId, pokemonName, pokeImg], references: [id, name, image])
  pokemonId     Int
  pokemonName   String
  pokeImg       String
  trainer       User @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  trainerId     Int
  assignedAt    DateTime @default(now())

  @@id([pokemonId, trainerId])
}

model Friend {
  friend         User  @relation("friend" ,fields: [friendId], references: [id])
  friendId       Int
  friendsWith    User  @relation("friendsWith" ,fields: [friendsWithId, friendName], references: [id, username])
  friendsWithId  Int
  friendName     String
  assignedAt     DateTime  @default(now())
  accepted       Boolean @default(false)
  
  @@id([friendId, friendsWithId])
}
