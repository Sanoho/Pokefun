generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                 Int @id @default(autoincrement())
  userId             Int  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user               User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int  @id @default(autoincrement())
  sessionToken String   @unique@map("session_token")
  userId       Int   @map("user_id")
  expires      DateTime
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     Int @id @default(autoincrement())
  username               String  @unique
  firstName              String
  lastName               String
  email                  String  @unique
  password               String
  age                    Int
  bio                    String?
  coins                  Int @default(20)
  badges                 Int @default(0)
  createdAt              DateTime  @default(now()) @map(name: "created_at")
  updatedAt              DateTime  @updatedAt @map(name: "updated_at")
  pokemons               PokemonTeam[]
  friendedBy             Friend[]  @relation("friendsWith")
  friendsWith            Friend[] @relation("friend")
  accounts               Account[]
  sessions               Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  }

model Pokemon {
  id            Int @id @default(autoincrement())
  name          String
  nickname      String?
  image         String
  type          String @default("normal")
  secondaryType String?
  details       String?
  hp            Int
  attack        Int
  speed         Int
  defense       Int @default(1)
  spriteFront   String
  spriteBack    String
  shinyFront    String
  shinyBack     String
  reply         String
  wins          Int @default(0)
  evolveAt      Int?
  canEvolve     Boolean @default(false) 
  trainers      PokemonTeam[]
}

model PokemonTeam {
  pokemon    Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId  Int
  trainer    User @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  trainerId  Int
  assignedAt DateTime @default(now())

  @@id([pokemonId, trainerId])
}

model Friend {
  friend         User  @relation("friend" ,fields: [friendId], references: [id])
  friendId       Int
  friendsWith    User  @relation("friendsWith" ,fields: [friendsWithId], references: [id])
  friendsWithId  Int
  assignedAt     DateTime  @default(now())
  accepted       Boolean @default(false)
  
  @@id([friendId, friendsWithId])
}
